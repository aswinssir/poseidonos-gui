// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosCliClient is the client API for PosCli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosCliClient interface {
	SystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
	StopSystem(ctx context.Context, in *StopSystemRequest, opts ...grpc.CallOption) (*StopSystemResponse, error)
	GetSystemProperty(ctx context.Context, in *GetSystemPropertyRequest, opts ...grpc.CallOption) (*GetSystemPropertyResponse, error)
	SetSystemProperty(ctx context.Context, in *SetSystemPropertyRequest, opts ...grpc.CallOption) (*SetSystemPropertyResponse, error)
	StartTelemetry(ctx context.Context, in *StartTelemetryRequest, opts ...grpc.CallOption) (*StartTelemetryResponse, error)
	StopTelemetry(ctx context.Context, in *StopTelemetryRequest, opts ...grpc.CallOption) (*StopTelemetryResponse, error)
	SetTelemetryProperty(ctx context.Context, in *SetTelemetryPropertyRequest, opts ...grpc.CallOption) (*SetTelemetryPropertyResponse, error)
	GetTelemetryProperty(ctx context.Context, in *GetTelemetryPropertyRequest, opts ...grpc.CallOption) (*GetTelemetryPropertyResponse, error)
	ResetEventWrr(ctx context.Context, in *ResetEventWrrRequest, opts ...grpc.CallOption) (*ResetEventWrrResponse, error)
	ResetMbr(ctx context.Context, in *ResetMbrRequest, opts ...grpc.CallOption) (*ResetMbrResponse, error)
	StopRebuilding(ctx context.Context, in *StopRebuildingRequest, opts ...grpc.CallOption) (*StopRebuildingResponse, error)
	UpdateEventWrr(ctx context.Context, in *UpdateEventWrrRequest, opts ...grpc.CallOption) (*UpdateEventWrrResponse, error)
	DumpMemorySnapshot(ctx context.Context, in *DumpMemorySnapshotRequest, opts ...grpc.CallOption) (*DumpMemorySnapshotResponse, error)
	// Array Commands
	AddSpare(ctx context.Context, in *AddSpareRequest, opts ...grpc.CallOption) (*AddSpareResponse, error)
	RemoveSpare(ctx context.Context, in *RemoveSpareRequest, opts ...grpc.CallOption) (*RemoveSpareResponse, error)
	ReplaceArrayDevice(ctx context.Context, in *ReplaceArrayDeviceRequest, opts ...grpc.CallOption) (*ReplaceArrayDeviceResponse, error)
	CreateArray(ctx context.Context, in *CreateArrayRequest, opts ...grpc.CallOption) (*CreateArrayResponse, error)
	AutocreateArray(ctx context.Context, in *AutocreateArrayRequest, opts ...grpc.CallOption) (*AutocreateArrayResponse, error)
	DeleteArray(ctx context.Context, in *DeleteArrayRequest, opts ...grpc.CallOption) (*DeleteArrayResponse, error)
	MountArray(ctx context.Context, in *MountArrayRequest, opts ...grpc.CallOption) (*MountArrayResponse, error)
	UnmountArray(ctx context.Context, in *UnmountArrayRequest, opts ...grpc.CallOption) (*UnmountArrayResponse, error)
	ListArray(ctx context.Context, in *ListArrayRequest, opts ...grpc.CallOption) (*ListArrayResponse, error)
	ArrayInfo(ctx context.Context, in *ArrayInfoRequest, opts ...grpc.CallOption) (*ArrayInfoResponse, error)
	RebuildArray(ctx context.Context, in *RebuildArrayRequest, opts ...grpc.CallOption) (*RebuildArrayResponse, error)
	SetLogPreference(ctx context.Context, in *SetLogPreferenceRequest, opts ...grpc.CallOption) (*SetLogPreferenceResponse, error)
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	LoggerInfo(ctx context.Context, in *LoggerInfoRequest, opts ...grpc.CallOption) (*LoggerInfoResponse, error)
	GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*GetLogLevelResponse, error)
	ApplyLogFilter(ctx context.Context, in *ApplyLogFilterRequest, opts ...grpc.CallOption) (*ApplyLogFilterResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	ScanDevice(ctx context.Context, in *ScanDeviceRequest, opts ...grpc.CallOption) (*ScanDeviceResponse, error)
	ListDevice(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error)
	GetSmartLog(ctx context.Context, in *GetSmartLogRequest, opts ...grpc.CallOption) (*GetSmartLogResponse, error)
	CreateSubsystem(ctx context.Context, in *CreateSubsystemRequest, opts ...grpc.CallOption) (*CreateSubsystemResponse, error)
	DeleteSubsystem(ctx context.Context, in *DeleteSubsystemRequest, opts ...grpc.CallOption) (*DeleteSubsystemResponse, error)
	AddListener(ctx context.Context, in *AddListenerRequest, opts ...grpc.CallOption) (*AddListenerResponse, error)
	RemoveListener(ctx context.Context, in *RemoveListenerRequest, opts ...grpc.CallOption) (*RemoveListenerResponse, error)
	ListListener(ctx context.Context, in *ListListenerRequest, opts ...grpc.CallOption) (*ListListenerResponse, error)
	SetListenerAnaState(ctx context.Context, in *SetListenerAnaStateRequest, opts ...grpc.CallOption) (*SetListenerAnaStateResponse, error)
	ListSubsystem(ctx context.Context, in *ListSubsystemRequest, opts ...grpc.CallOption) (*ListSubsystemResponse, error)
	SubsystemInfo(ctx context.Context, in *SubsystemInfoRequest, opts ...grpc.CallOption) (*SubsystemInfoResponse, error)
	CreateTransport(ctx context.Context, in *CreateTransportRequest, opts ...grpc.CallOption) (*CreateTransportResponse, error)
	ListTransport(ctx context.Context, in *ListTransportRequest, opts ...grpc.CallOption) (*ListTransportResponse, error)
	// Volume Commands
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	QosCreateVolumePolicy(ctx context.Context, in *QosCreateVolumePolicyRequest, opts ...grpc.CallOption) (*QosCreateVolumePolicyResponse, error)
	QosResetVolumePolicy(ctx context.Context, in *QosResetVolumePolicyRequest, opts ...grpc.CallOption) (*QosResetVolumePolicyResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	UnmountVolume(ctx context.Context, in *UnmountVolumeRequest, opts ...grpc.CallOption) (*UnmountVolumeResponse, error)
	MountVolume(ctx context.Context, in *MountVolumeRequest, opts ...grpc.CallOption) (*MountVolumeResponse, error)
	ListVolume(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumeResponse, error)
	SetVolumeProperty(ctx context.Context, in *SetVolumePropertyRequest, opts ...grpc.CallOption) (*SetVolumePropertyResponse, error)
	VolumeInfo(ctx context.Context, in *VolumeInfoRequest, opts ...grpc.CallOption) (*VolumeInfoResponse, error)
	VolumeRename(ctx context.Context, in *VolumeRenameRequest, opts ...grpc.CallOption) (*VolumeRenameResponse, error)
	ListQOSPolicy(ctx context.Context, in *ListQOSPolicyRequest, opts ...grpc.CallOption) (*ListQOSPolicyResponse, error)
	ListWBT(ctx context.Context, in *ListWBTRequest, opts ...grpc.CallOption) (*ListWBTResponse, error)
	WBT(ctx context.Context, in *WBTRequest, opts ...grpc.CallOption) (*WBTResponse, error)
}

type posCliClient struct {
	cc grpc.ClientConnInterface
}

func NewPosCliClient(cc grpc.ClientConnInterface) PosCliClient {
	return &posCliClient{cc}
}

func (c *posCliClient) SystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	out := new(SystemInfoResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) StopSystem(ctx context.Context, in *StopSystemRequest, opts ...grpc.CallOption) (*StopSystemResponse, error) {
	out := new(StopSystemResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/StopSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) GetSystemProperty(ctx context.Context, in *GetSystemPropertyRequest, opts ...grpc.CallOption) (*GetSystemPropertyResponse, error) {
	out := new(GetSystemPropertyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/GetSystemProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetSystemProperty(ctx context.Context, in *SetSystemPropertyRequest, opts ...grpc.CallOption) (*SetSystemPropertyResponse, error) {
	out := new(SetSystemPropertyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetSystemProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) StartTelemetry(ctx context.Context, in *StartTelemetryRequest, opts ...grpc.CallOption) (*StartTelemetryResponse, error) {
	out := new(StartTelemetryResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/StartTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) StopTelemetry(ctx context.Context, in *StopTelemetryRequest, opts ...grpc.CallOption) (*StopTelemetryResponse, error) {
	out := new(StopTelemetryResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/StopTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetTelemetryProperty(ctx context.Context, in *SetTelemetryPropertyRequest, opts ...grpc.CallOption) (*SetTelemetryPropertyResponse, error) {
	out := new(SetTelemetryPropertyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetTelemetryProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) GetTelemetryProperty(ctx context.Context, in *GetTelemetryPropertyRequest, opts ...grpc.CallOption) (*GetTelemetryPropertyResponse, error) {
	out := new(GetTelemetryPropertyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/GetTelemetryProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ResetEventWrr(ctx context.Context, in *ResetEventWrrRequest, opts ...grpc.CallOption) (*ResetEventWrrResponse, error) {
	out := new(ResetEventWrrResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ResetEventWrr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ResetMbr(ctx context.Context, in *ResetMbrRequest, opts ...grpc.CallOption) (*ResetMbrResponse, error) {
	out := new(ResetMbrResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ResetMbr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) StopRebuilding(ctx context.Context, in *StopRebuildingRequest, opts ...grpc.CallOption) (*StopRebuildingResponse, error) {
	out := new(StopRebuildingResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/StopRebuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) UpdateEventWrr(ctx context.Context, in *UpdateEventWrrRequest, opts ...grpc.CallOption) (*UpdateEventWrrResponse, error) {
	out := new(UpdateEventWrrResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/UpdateEventWrr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) DumpMemorySnapshot(ctx context.Context, in *DumpMemorySnapshotRequest, opts ...grpc.CallOption) (*DumpMemorySnapshotResponse, error) {
	out := new(DumpMemorySnapshotResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/DumpMemorySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) AddSpare(ctx context.Context, in *AddSpareRequest, opts ...grpc.CallOption) (*AddSpareResponse, error) {
	out := new(AddSpareResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/AddSpare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) RemoveSpare(ctx context.Context, in *RemoveSpareRequest, opts ...grpc.CallOption) (*RemoveSpareResponse, error) {
	out := new(RemoveSpareResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/RemoveSpare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ReplaceArrayDevice(ctx context.Context, in *ReplaceArrayDeviceRequest, opts ...grpc.CallOption) (*ReplaceArrayDeviceResponse, error) {
	out := new(ReplaceArrayDeviceResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ReplaceArrayDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) CreateArray(ctx context.Context, in *CreateArrayRequest, opts ...grpc.CallOption) (*CreateArrayResponse, error) {
	out := new(CreateArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/CreateArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) AutocreateArray(ctx context.Context, in *AutocreateArrayRequest, opts ...grpc.CallOption) (*AutocreateArrayResponse, error) {
	out := new(AutocreateArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/AutocreateArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) DeleteArray(ctx context.Context, in *DeleteArrayRequest, opts ...grpc.CallOption) (*DeleteArrayResponse, error) {
	out := new(DeleteArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/DeleteArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) MountArray(ctx context.Context, in *MountArrayRequest, opts ...grpc.CallOption) (*MountArrayResponse, error) {
	out := new(MountArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/MountArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) UnmountArray(ctx context.Context, in *UnmountArrayRequest, opts ...grpc.CallOption) (*UnmountArrayResponse, error) {
	out := new(UnmountArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/UnmountArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListArray(ctx context.Context, in *ListArrayRequest, opts ...grpc.CallOption) (*ListArrayResponse, error) {
	out := new(ListArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ArrayInfo(ctx context.Context, in *ArrayInfoRequest, opts ...grpc.CallOption) (*ArrayInfoResponse, error) {
	out := new(ArrayInfoResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ArrayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) RebuildArray(ctx context.Context, in *RebuildArrayRequest, opts ...grpc.CallOption) (*RebuildArrayResponse, error) {
	out := new(RebuildArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/RebuildArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetLogPreference(ctx context.Context, in *SetLogPreferenceRequest, opts ...grpc.CallOption) (*SetLogPreferenceResponse, error) {
	out := new(SetLogPreferenceResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetLogPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) LoggerInfo(ctx context.Context, in *LoggerInfoRequest, opts ...grpc.CallOption) (*LoggerInfoResponse, error) {
	out := new(LoggerInfoResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/LoggerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*GetLogLevelResponse, error) {
	out := new(GetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/GetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ApplyLogFilter(ctx context.Context, in *ApplyLogFilterRequest, opts ...grpc.CallOption) (*ApplyLogFilterResponse, error) {
	out := new(ApplyLogFilterResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ApplyLogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ScanDevice(ctx context.Context, in *ScanDeviceRequest, opts ...grpc.CallOption) (*ScanDeviceResponse, error) {
	out := new(ScanDeviceResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ScanDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListDevice(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error) {
	out := new(ListDeviceResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) GetSmartLog(ctx context.Context, in *GetSmartLogRequest, opts ...grpc.CallOption) (*GetSmartLogResponse, error) {
	out := new(GetSmartLogResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/GetSmartLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) CreateSubsystem(ctx context.Context, in *CreateSubsystemRequest, opts ...grpc.CallOption) (*CreateSubsystemResponse, error) {
	out := new(CreateSubsystemResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/CreateSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) DeleteSubsystem(ctx context.Context, in *DeleteSubsystemRequest, opts ...grpc.CallOption) (*DeleteSubsystemResponse, error) {
	out := new(DeleteSubsystemResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/DeleteSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) AddListener(ctx context.Context, in *AddListenerRequest, opts ...grpc.CallOption) (*AddListenerResponse, error) {
	out := new(AddListenerResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/AddListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) RemoveListener(ctx context.Context, in *RemoveListenerRequest, opts ...grpc.CallOption) (*RemoveListenerResponse, error) {
	out := new(RemoveListenerResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/RemoveListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListListener(ctx context.Context, in *ListListenerRequest, opts ...grpc.CallOption) (*ListListenerResponse, error) {
	out := new(ListListenerResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetListenerAnaState(ctx context.Context, in *SetListenerAnaStateRequest, opts ...grpc.CallOption) (*SetListenerAnaStateResponse, error) {
	out := new(SetListenerAnaStateResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetListenerAnaState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListSubsystem(ctx context.Context, in *ListSubsystemRequest, opts ...grpc.CallOption) (*ListSubsystemResponse, error) {
	out := new(ListSubsystemResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SubsystemInfo(ctx context.Context, in *SubsystemInfoRequest, opts ...grpc.CallOption) (*SubsystemInfoResponse, error) {
	out := new(SubsystemInfoResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SubsystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) CreateTransport(ctx context.Context, in *CreateTransportRequest, opts ...grpc.CallOption) (*CreateTransportResponse, error) {
	out := new(CreateTransportResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/CreateTransport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListTransport(ctx context.Context, in *ListTransportRequest, opts ...grpc.CallOption) (*ListTransportResponse, error) {
	out := new(ListTransportResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListTransport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) QosCreateVolumePolicy(ctx context.Context, in *QosCreateVolumePolicyRequest, opts ...grpc.CallOption) (*QosCreateVolumePolicyResponse, error) {
	out := new(QosCreateVolumePolicyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/QosCreateVolumePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) QosResetVolumePolicy(ctx context.Context, in *QosResetVolumePolicyRequest, opts ...grpc.CallOption) (*QosResetVolumePolicyResponse, error) {
	out := new(QosResetVolumePolicyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/QosResetVolumePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) UnmountVolume(ctx context.Context, in *UnmountVolumeRequest, opts ...grpc.CallOption) (*UnmountVolumeResponse, error) {
	out := new(UnmountVolumeResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/UnmountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) MountVolume(ctx context.Context, in *MountVolumeRequest, opts ...grpc.CallOption) (*MountVolumeResponse, error) {
	out := new(MountVolumeResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/MountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListVolume(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumeResponse, error) {
	out := new(ListVolumeResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) SetVolumeProperty(ctx context.Context, in *SetVolumePropertyRequest, opts ...grpc.CallOption) (*SetVolumePropertyResponse, error) {
	out := new(SetVolumePropertyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/SetVolumeProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) VolumeInfo(ctx context.Context, in *VolumeInfoRequest, opts ...grpc.CallOption) (*VolumeInfoResponse, error) {
	out := new(VolumeInfoResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/VolumeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) VolumeRename(ctx context.Context, in *VolumeRenameRequest, opts ...grpc.CallOption) (*VolumeRenameResponse, error) {
	out := new(VolumeRenameResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/VolumeRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListQOSPolicy(ctx context.Context, in *ListQOSPolicyRequest, opts ...grpc.CallOption) (*ListQOSPolicyResponse, error) {
	out := new(ListQOSPolicyResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListQOSPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) ListWBT(ctx context.Context, in *ListWBTRequest, opts ...grpc.CallOption) (*ListWBTResponse, error) {
	out := new(ListWBTResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/ListWBT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCliClient) WBT(ctx context.Context, in *WBTRequest, opts ...grpc.CallOption) (*WBTResponse, error) {
	out := new(WBTResponse)
	err := c.cc.Invoke(ctx, "/grpc_cli.PosCli/WBT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosCliServer is the server API for PosCli service.
// All implementations must embed UnimplementedPosCliServer
// for forward compatibility
type PosCliServer interface {
	SystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error)
	StopSystem(context.Context, *StopSystemRequest) (*StopSystemResponse, error)
	GetSystemProperty(context.Context, *GetSystemPropertyRequest) (*GetSystemPropertyResponse, error)
	SetSystemProperty(context.Context, *SetSystemPropertyRequest) (*SetSystemPropertyResponse, error)
	StartTelemetry(context.Context, *StartTelemetryRequest) (*StartTelemetryResponse, error)
	StopTelemetry(context.Context, *StopTelemetryRequest) (*StopTelemetryResponse, error)
	SetTelemetryProperty(context.Context, *SetTelemetryPropertyRequest) (*SetTelemetryPropertyResponse, error)
	GetTelemetryProperty(context.Context, *GetTelemetryPropertyRequest) (*GetTelemetryPropertyResponse, error)
	ResetEventWrr(context.Context, *ResetEventWrrRequest) (*ResetEventWrrResponse, error)
	ResetMbr(context.Context, *ResetMbrRequest) (*ResetMbrResponse, error)
	StopRebuilding(context.Context, *StopRebuildingRequest) (*StopRebuildingResponse, error)
	UpdateEventWrr(context.Context, *UpdateEventWrrRequest) (*UpdateEventWrrResponse, error)
	DumpMemorySnapshot(context.Context, *DumpMemorySnapshotRequest) (*DumpMemorySnapshotResponse, error)
	// Array Commands
	AddSpare(context.Context, *AddSpareRequest) (*AddSpareResponse, error)
	RemoveSpare(context.Context, *RemoveSpareRequest) (*RemoveSpareResponse, error)
	ReplaceArrayDevice(context.Context, *ReplaceArrayDeviceRequest) (*ReplaceArrayDeviceResponse, error)
	CreateArray(context.Context, *CreateArrayRequest) (*CreateArrayResponse, error)
	AutocreateArray(context.Context, *AutocreateArrayRequest) (*AutocreateArrayResponse, error)
	DeleteArray(context.Context, *DeleteArrayRequest) (*DeleteArrayResponse, error)
	MountArray(context.Context, *MountArrayRequest) (*MountArrayResponse, error)
	UnmountArray(context.Context, *UnmountArrayRequest) (*UnmountArrayResponse, error)
	ListArray(context.Context, *ListArrayRequest) (*ListArrayResponse, error)
	ArrayInfo(context.Context, *ArrayInfoRequest) (*ArrayInfoResponse, error)
	RebuildArray(context.Context, *RebuildArrayRequest) (*RebuildArrayResponse, error)
	SetLogPreference(context.Context, *SetLogPreferenceRequest) (*SetLogPreferenceResponse, error)
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	LoggerInfo(context.Context, *LoggerInfoRequest) (*LoggerInfoResponse, error)
	GetLogLevel(context.Context, *GetLogLevelRequest) (*GetLogLevelResponse, error)
	ApplyLogFilter(context.Context, *ApplyLogFilterRequest) (*ApplyLogFilterResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	ScanDevice(context.Context, *ScanDeviceRequest) (*ScanDeviceResponse, error)
	ListDevice(context.Context, *ListDeviceRequest) (*ListDeviceResponse, error)
	GetSmartLog(context.Context, *GetSmartLogRequest) (*GetSmartLogResponse, error)
	CreateSubsystem(context.Context, *CreateSubsystemRequest) (*CreateSubsystemResponse, error)
	DeleteSubsystem(context.Context, *DeleteSubsystemRequest) (*DeleteSubsystemResponse, error)
	AddListener(context.Context, *AddListenerRequest) (*AddListenerResponse, error)
	RemoveListener(context.Context, *RemoveListenerRequest) (*RemoveListenerResponse, error)
	ListListener(context.Context, *ListListenerRequest) (*ListListenerResponse, error)
	SetListenerAnaState(context.Context, *SetListenerAnaStateRequest) (*SetListenerAnaStateResponse, error)
	ListSubsystem(context.Context, *ListSubsystemRequest) (*ListSubsystemResponse, error)
	SubsystemInfo(context.Context, *SubsystemInfoRequest) (*SubsystemInfoResponse, error)
	CreateTransport(context.Context, *CreateTransportRequest) (*CreateTransportResponse, error)
	ListTransport(context.Context, *ListTransportRequest) (*ListTransportResponse, error)
	// Volume Commands
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	QosCreateVolumePolicy(context.Context, *QosCreateVolumePolicyRequest) (*QosCreateVolumePolicyResponse, error)
	QosResetVolumePolicy(context.Context, *QosResetVolumePolicyRequest) (*QosResetVolumePolicyResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	UnmountVolume(context.Context, *UnmountVolumeRequest) (*UnmountVolumeResponse, error)
	MountVolume(context.Context, *MountVolumeRequest) (*MountVolumeResponse, error)
	ListVolume(context.Context, *ListVolumeRequest) (*ListVolumeResponse, error)
	SetVolumeProperty(context.Context, *SetVolumePropertyRequest) (*SetVolumePropertyResponse, error)
	VolumeInfo(context.Context, *VolumeInfoRequest) (*VolumeInfoResponse, error)
	VolumeRename(context.Context, *VolumeRenameRequest) (*VolumeRenameResponse, error)
	ListQOSPolicy(context.Context, *ListQOSPolicyRequest) (*ListQOSPolicyResponse, error)
	ListWBT(context.Context, *ListWBTRequest) (*ListWBTResponse, error)
	WBT(context.Context, *WBTRequest) (*WBTResponse, error)
	mustEmbedUnimplementedPosCliServer()
}

// UnimplementedPosCliServer must be embedded to have forward compatible implementations.
type UnimplementedPosCliServer struct {
}

func (UnimplementedPosCliServer) SystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedPosCliServer) StopSystem(context.Context, *StopSystemRequest) (*StopSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSystem not implemented")
}
func (UnimplementedPosCliServer) GetSystemProperty(context.Context, *GetSystemPropertyRequest) (*GetSystemPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemProperty not implemented")
}
func (UnimplementedPosCliServer) SetSystemProperty(context.Context, *SetSystemPropertyRequest) (*SetSystemPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemProperty not implemented")
}
func (UnimplementedPosCliServer) StartTelemetry(context.Context, *StartTelemetryRequest) (*StartTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTelemetry not implemented")
}
func (UnimplementedPosCliServer) StopTelemetry(context.Context, *StopTelemetryRequest) (*StopTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTelemetry not implemented")
}
func (UnimplementedPosCliServer) SetTelemetryProperty(context.Context, *SetTelemetryPropertyRequest) (*SetTelemetryPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTelemetryProperty not implemented")
}
func (UnimplementedPosCliServer) GetTelemetryProperty(context.Context, *GetTelemetryPropertyRequest) (*GetTelemetryPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryProperty not implemented")
}
func (UnimplementedPosCliServer) ResetEventWrr(context.Context, *ResetEventWrrRequest) (*ResetEventWrrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEventWrr not implemented")
}
func (UnimplementedPosCliServer) ResetMbr(context.Context, *ResetMbrRequest) (*ResetMbrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMbr not implemented")
}
func (UnimplementedPosCliServer) StopRebuilding(context.Context, *StopRebuildingRequest) (*StopRebuildingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRebuilding not implemented")
}
func (UnimplementedPosCliServer) UpdateEventWrr(context.Context, *UpdateEventWrrRequest) (*UpdateEventWrrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventWrr not implemented")
}
func (UnimplementedPosCliServer) DumpMemorySnapshot(context.Context, *DumpMemorySnapshotRequest) (*DumpMemorySnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpMemorySnapshot not implemented")
}
func (UnimplementedPosCliServer) AddSpare(context.Context, *AddSpareRequest) (*AddSpareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpare not implemented")
}
func (UnimplementedPosCliServer) RemoveSpare(context.Context, *RemoveSpareRequest) (*RemoveSpareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSpare not implemented")
}
func (UnimplementedPosCliServer) ReplaceArrayDevice(context.Context, *ReplaceArrayDeviceRequest) (*ReplaceArrayDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceArrayDevice not implemented")
}
func (UnimplementedPosCliServer) CreateArray(context.Context, *CreateArrayRequest) (*CreateArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArray not implemented")
}
func (UnimplementedPosCliServer) AutocreateArray(context.Context, *AutocreateArrayRequest) (*AutocreateArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutocreateArray not implemented")
}
func (UnimplementedPosCliServer) DeleteArray(context.Context, *DeleteArrayRequest) (*DeleteArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArray not implemented")
}
func (UnimplementedPosCliServer) MountArray(context.Context, *MountArrayRequest) (*MountArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountArray not implemented")
}
func (UnimplementedPosCliServer) UnmountArray(context.Context, *UnmountArrayRequest) (*UnmountArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountArray not implemented")
}
func (UnimplementedPosCliServer) ListArray(context.Context, *ListArrayRequest) (*ListArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArray not implemented")
}
func (UnimplementedPosCliServer) ArrayInfo(context.Context, *ArrayInfoRequest) (*ArrayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayInfo not implemented")
}
func (UnimplementedPosCliServer) RebuildArray(context.Context, *RebuildArrayRequest) (*RebuildArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildArray not implemented")
}
func (UnimplementedPosCliServer) SetLogPreference(context.Context, *SetLogPreferenceRequest) (*SetLogPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogPreference not implemented")
}
func (UnimplementedPosCliServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedPosCliServer) LoggerInfo(context.Context, *LoggerInfoRequest) (*LoggerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggerInfo not implemented")
}
func (UnimplementedPosCliServer) GetLogLevel(context.Context, *GetLogLevelRequest) (*GetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (UnimplementedPosCliServer) ApplyLogFilter(context.Context, *ApplyLogFilterRequest) (*ApplyLogFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLogFilter not implemented")
}
func (UnimplementedPosCliServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedPosCliServer) ScanDevice(context.Context, *ScanDeviceRequest) (*ScanDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanDevice not implemented")
}
func (UnimplementedPosCliServer) ListDevice(context.Context, *ListDeviceRequest) (*ListDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevice not implemented")
}
func (UnimplementedPosCliServer) GetSmartLog(context.Context, *GetSmartLogRequest) (*GetSmartLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartLog not implemented")
}
func (UnimplementedPosCliServer) CreateSubsystem(context.Context, *CreateSubsystemRequest) (*CreateSubsystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubsystem not implemented")
}
func (UnimplementedPosCliServer) DeleteSubsystem(context.Context, *DeleteSubsystemRequest) (*DeleteSubsystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubsystem not implemented")
}
func (UnimplementedPosCliServer) AddListener(context.Context, *AddListenerRequest) (*AddListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListener not implemented")
}
func (UnimplementedPosCliServer) RemoveListener(context.Context, *RemoveListenerRequest) (*RemoveListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListener not implemented")
}
func (UnimplementedPosCliServer) ListListener(context.Context, *ListListenerRequest) (*ListListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListener not implemented")
}
func (UnimplementedPosCliServer) SetListenerAnaState(context.Context, *SetListenerAnaStateRequest) (*SetListenerAnaStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerAnaState not implemented")
}
func (UnimplementedPosCliServer) ListSubsystem(context.Context, *ListSubsystemRequest) (*ListSubsystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubsystem not implemented")
}
func (UnimplementedPosCliServer) SubsystemInfo(context.Context, *SubsystemInfoRequest) (*SubsystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubsystemInfo not implemented")
}
func (UnimplementedPosCliServer) CreateTransport(context.Context, *CreateTransportRequest) (*CreateTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransport not implemented")
}
func (UnimplementedPosCliServer) ListTransport(context.Context, *ListTransportRequest) (*ListTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransport not implemented")
}
func (UnimplementedPosCliServer) CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedPosCliServer) QosCreateVolumePolicy(context.Context, *QosCreateVolumePolicyRequest) (*QosCreateVolumePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QosCreateVolumePolicy not implemented")
}
func (UnimplementedPosCliServer) QosResetVolumePolicy(context.Context, *QosResetVolumePolicyRequest) (*QosResetVolumePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QosResetVolumePolicy not implemented")
}
func (UnimplementedPosCliServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedPosCliServer) UnmountVolume(context.Context, *UnmountVolumeRequest) (*UnmountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountVolume not implemented")
}
func (UnimplementedPosCliServer) MountVolume(context.Context, *MountVolumeRequest) (*MountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountVolume not implemented")
}
func (UnimplementedPosCliServer) ListVolume(context.Context, *ListVolumeRequest) (*ListVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolume not implemented")
}
func (UnimplementedPosCliServer) SetVolumeProperty(context.Context, *SetVolumePropertyRequest) (*SetVolumePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolumeProperty not implemented")
}
func (UnimplementedPosCliServer) VolumeInfo(context.Context, *VolumeInfoRequest) (*VolumeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeInfo not implemented")
}
func (UnimplementedPosCliServer) VolumeRename(context.Context, *VolumeRenameRequest) (*VolumeRenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeRename not implemented")
}
func (UnimplementedPosCliServer) ListQOSPolicy(context.Context, *ListQOSPolicyRequest) (*ListQOSPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQOSPolicy not implemented")
}
func (UnimplementedPosCliServer) ListWBT(context.Context, *ListWBTRequest) (*ListWBTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWBT not implemented")
}
func (UnimplementedPosCliServer) WBT(context.Context, *WBTRequest) (*WBTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WBT not implemented")
}
func (UnimplementedPosCliServer) mustEmbedUnimplementedPosCliServer() {}

// UnsafePosCliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosCliServer will
// result in compilation errors.
type UnsafePosCliServer interface {
	mustEmbedUnimplementedPosCliServer()
}

func RegisterPosCliServer(s grpc.ServiceRegistrar, srv PosCliServer) {
	s.RegisterService(&PosCli_ServiceDesc, srv)
}

func _PosCli_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SystemInfo(ctx, req.(*SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_StopSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).StopSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/StopSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).StopSystem(ctx, req.(*StopSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_GetSystemProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).GetSystemProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/GetSystemProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).GetSystemProperty(ctx, req.(*GetSystemPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetSystemProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetSystemProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetSystemProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetSystemProperty(ctx, req.(*SetSystemPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_StartTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).StartTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/StartTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).StartTelemetry(ctx, req.(*StartTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_StopTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).StopTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/StopTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).StopTelemetry(ctx, req.(*StopTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetTelemetryProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTelemetryPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetTelemetryProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetTelemetryProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetTelemetryProperty(ctx, req.(*SetTelemetryPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_GetTelemetryProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).GetTelemetryProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/GetTelemetryProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).GetTelemetryProperty(ctx, req.(*GetTelemetryPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ResetEventWrr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEventWrrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ResetEventWrr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ResetEventWrr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ResetEventWrr(ctx, req.(*ResetEventWrrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ResetMbr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMbrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ResetMbr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ResetMbr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ResetMbr(ctx, req.(*ResetMbrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_StopRebuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRebuildingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).StopRebuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/StopRebuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).StopRebuilding(ctx, req.(*StopRebuildingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_UpdateEventWrr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventWrrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).UpdateEventWrr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/UpdateEventWrr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).UpdateEventWrr(ctx, req.(*UpdateEventWrrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_DumpMemorySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpMemorySnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).DumpMemorySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/DumpMemorySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).DumpMemorySnapshot(ctx, req.(*DumpMemorySnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_AddSpare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).AddSpare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/AddSpare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).AddSpare(ctx, req.(*AddSpareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_RemoveSpare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSpareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).RemoveSpare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/RemoveSpare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).RemoveSpare(ctx, req.(*RemoveSpareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ReplaceArrayDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceArrayDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ReplaceArrayDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ReplaceArrayDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ReplaceArrayDevice(ctx, req.(*ReplaceArrayDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_CreateArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).CreateArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/CreateArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).CreateArray(ctx, req.(*CreateArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_AutocreateArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocreateArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).AutocreateArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/AutocreateArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).AutocreateArray(ctx, req.(*AutocreateArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_DeleteArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).DeleteArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/DeleteArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).DeleteArray(ctx, req.(*DeleteArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_MountArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).MountArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/MountArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).MountArray(ctx, req.(*MountArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_UnmountArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).UnmountArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/UnmountArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).UnmountArray(ctx, req.(*UnmountArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListArray(ctx, req.(*ListArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ArrayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ArrayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ArrayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ArrayInfo(ctx, req.(*ArrayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_RebuildArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).RebuildArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/RebuildArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).RebuildArray(ctx, req.(*RebuildArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetLogPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetLogPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetLogPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetLogPreference(ctx, req.(*SetLogPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_LoggerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).LoggerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/LoggerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).LoggerInfo(ctx, req.(*LoggerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_GetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).GetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/GetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).GetLogLevel(ctx, req.(*GetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ApplyLogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyLogFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ApplyLogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ApplyLogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ApplyLogFilter(ctx, req.(*ApplyLogFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ScanDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ScanDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ScanDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ScanDevice(ctx, req.(*ScanDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListDevice(ctx, req.(*ListDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_GetSmartLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmartLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).GetSmartLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/GetSmartLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).GetSmartLog(ctx, req.(*GetSmartLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_CreateSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).CreateSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/CreateSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).CreateSubsystem(ctx, req.(*CreateSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_DeleteSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).DeleteSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/DeleteSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).DeleteSubsystem(ctx, req.(*DeleteSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_AddListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).AddListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/AddListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).AddListener(ctx, req.(*AddListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_RemoveListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).RemoveListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/RemoveListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).RemoveListener(ctx, req.(*RemoveListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListListener(ctx, req.(*ListListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetListenerAnaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerAnaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetListenerAnaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetListenerAnaState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetListenerAnaState(ctx, req.(*SetListenerAnaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListSubsystem(ctx, req.(*ListSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SubsystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SubsystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SubsystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SubsystemInfo(ctx, req.(*SubsystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_CreateTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).CreateTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/CreateTransport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).CreateTransport(ctx, req.(*CreateTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListTransport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListTransport(ctx, req.(*ListTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_QosCreateVolumePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QosCreateVolumePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).QosCreateVolumePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/QosCreateVolumePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).QosCreateVolumePolicy(ctx, req.(*QosCreateVolumePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_QosResetVolumePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QosResetVolumePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).QosResetVolumePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/QosResetVolumePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).QosResetVolumePolicy(ctx, req.(*QosResetVolumePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).UnmountVolume(ctx, req.(*UnmountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).MountVolume(ctx, req.(*MountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListVolume(ctx, req.(*ListVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_SetVolumeProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).SetVolumeProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/SetVolumeProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).SetVolumeProperty(ctx, req.(*SetVolumePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_VolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).VolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/VolumeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).VolumeInfo(ctx, req.(*VolumeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_VolumeRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).VolumeRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/VolumeRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).VolumeRename(ctx, req.(*VolumeRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListQOSPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQOSPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListQOSPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListQOSPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListQOSPolicy(ctx, req.(*ListQOSPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_ListWBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWBTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).ListWBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/ListWBT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).ListWBT(ctx, req.(*ListWBTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCli_WBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WBTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCliServer).WBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cli.PosCli/WBT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCliServer).WBT(ctx, req.(*WBTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosCli_ServiceDesc is the grpc.ServiceDesc for PosCli service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosCli_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_cli.PosCli",
	HandlerType: (*PosCliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemInfo",
			Handler:    _PosCli_SystemInfo_Handler,
		},
		{
			MethodName: "StopSystem",
			Handler:    _PosCli_StopSystem_Handler,
		},
		{
			MethodName: "GetSystemProperty",
			Handler:    _PosCli_GetSystemProperty_Handler,
		},
		{
			MethodName: "SetSystemProperty",
			Handler:    _PosCli_SetSystemProperty_Handler,
		},
		{
			MethodName: "StartTelemetry",
			Handler:    _PosCli_StartTelemetry_Handler,
		},
		{
			MethodName: "StopTelemetry",
			Handler:    _PosCli_StopTelemetry_Handler,
		},
		{
			MethodName: "SetTelemetryProperty",
			Handler:    _PosCli_SetTelemetryProperty_Handler,
		},
		{
			MethodName: "GetTelemetryProperty",
			Handler:    _PosCli_GetTelemetryProperty_Handler,
		},
		{
			MethodName: "ResetEventWrr",
			Handler:    _PosCli_ResetEventWrr_Handler,
		},
		{
			MethodName: "ResetMbr",
			Handler:    _PosCli_ResetMbr_Handler,
		},
		{
			MethodName: "StopRebuilding",
			Handler:    _PosCli_StopRebuilding_Handler,
		},
		{
			MethodName: "UpdateEventWrr",
			Handler:    _PosCli_UpdateEventWrr_Handler,
		},
		{
			MethodName: "DumpMemorySnapshot",
			Handler:    _PosCli_DumpMemorySnapshot_Handler,
		},
		{
			MethodName: "AddSpare",
			Handler:    _PosCli_AddSpare_Handler,
		},
		{
			MethodName: "RemoveSpare",
			Handler:    _PosCli_RemoveSpare_Handler,
		},
		{
			MethodName: "ReplaceArrayDevice",
			Handler:    _PosCli_ReplaceArrayDevice_Handler,
		},
		{
			MethodName: "CreateArray",
			Handler:    _PosCli_CreateArray_Handler,
		},
		{
			MethodName: "AutocreateArray",
			Handler:    _PosCli_AutocreateArray_Handler,
		},
		{
			MethodName: "DeleteArray",
			Handler:    _PosCli_DeleteArray_Handler,
		},
		{
			MethodName: "MountArray",
			Handler:    _PosCli_MountArray_Handler,
		},
		{
			MethodName: "UnmountArray",
			Handler:    _PosCli_UnmountArray_Handler,
		},
		{
			MethodName: "ListArray",
			Handler:    _PosCli_ListArray_Handler,
		},
		{
			MethodName: "ArrayInfo",
			Handler:    _PosCli_ArrayInfo_Handler,
		},
		{
			MethodName: "RebuildArray",
			Handler:    _PosCli_RebuildArray_Handler,
		},
		{
			MethodName: "SetLogPreference",
			Handler:    _PosCli_SetLogPreference_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _PosCli_SetLogLevel_Handler,
		},
		{
			MethodName: "LoggerInfo",
			Handler:    _PosCli_LoggerInfo_Handler,
		},
		{
			MethodName: "GetLogLevel",
			Handler:    _PosCli_GetLogLevel_Handler,
		},
		{
			MethodName: "ApplyLogFilter",
			Handler:    _PosCli_ApplyLogFilter_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _PosCli_CreateDevice_Handler,
		},
		{
			MethodName: "ScanDevice",
			Handler:    _PosCli_ScanDevice_Handler,
		},
		{
			MethodName: "ListDevice",
			Handler:    _PosCli_ListDevice_Handler,
		},
		{
			MethodName: "GetSmartLog",
			Handler:    _PosCli_GetSmartLog_Handler,
		},
		{
			MethodName: "CreateSubsystem",
			Handler:    _PosCli_CreateSubsystem_Handler,
		},
		{
			MethodName: "DeleteSubsystem",
			Handler:    _PosCli_DeleteSubsystem_Handler,
		},
		{
			MethodName: "AddListener",
			Handler:    _PosCli_AddListener_Handler,
		},
		{
			MethodName: "RemoveListener",
			Handler:    _PosCli_RemoveListener_Handler,
		},
		{
			MethodName: "ListListener",
			Handler:    _PosCli_ListListener_Handler,
		},
		{
			MethodName: "SetListenerAnaState",
			Handler:    _PosCli_SetListenerAnaState_Handler,
		},
		{
			MethodName: "ListSubsystem",
			Handler:    _PosCli_ListSubsystem_Handler,
		},
		{
			MethodName: "SubsystemInfo",
			Handler:    _PosCli_SubsystemInfo_Handler,
		},
		{
			MethodName: "CreateTransport",
			Handler:    _PosCli_CreateTransport_Handler,
		},
		{
			MethodName: "ListTransport",
			Handler:    _PosCli_ListTransport_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _PosCli_CreateVolume_Handler,
		},
		{
			MethodName: "QosCreateVolumePolicy",
			Handler:    _PosCli_QosCreateVolumePolicy_Handler,
		},
		{
			MethodName: "QosResetVolumePolicy",
			Handler:    _PosCli_QosResetVolumePolicy_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _PosCli_DeleteVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _PosCli_UnmountVolume_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _PosCli_MountVolume_Handler,
		},
		{
			MethodName: "ListVolume",
			Handler:    _PosCli_ListVolume_Handler,
		},
		{
			MethodName: "SetVolumeProperty",
			Handler:    _PosCli_SetVolumeProperty_Handler,
		},
		{
			MethodName: "VolumeInfo",
			Handler:    _PosCli_VolumeInfo_Handler,
		},
		{
			MethodName: "VolumeRename",
			Handler:    _PosCli_VolumeRename_Handler,
		},
		{
			MethodName: "ListQOSPolicy",
			Handler:    _PosCli_ListQOSPolicy_Handler,
		},
		{
			MethodName: "ListWBT",
			Handler:    _PosCli_ListWBT_Handler,
		},
		{
			MethodName: "WBT",
			Handler:    _PosCli_WBT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}
